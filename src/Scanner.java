// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: scanner.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SIMPLECOMMENT = 2;
  public static final int MULTIPLELINECOMMENT = 4;
  public static final int STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\211\u0100\1\u0600\1\u0100\1\u0e00\1\u0f00\1\u1000\1\u1100\123\u0100"+
    "\1\u0900\4\u0100\1\u1200\10\u0100\1\u1300\2\u0100\1\u1400\1\u1500"+
    "\1\u1100\1\u0100\1\u0500\1\u0100\1\u1600\1\u1300\1\u0800\3\u0100"+
    "\1\u1000\1\u1700\114\u0100\1\u1800\1\u1000\153\u0100\1\u1900\11\u0100"+
    "\1\u1a00\1\u1100\6\u0100\1\u1000\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\7\23\2\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\0\4\32\1\33"+
    "\1\34\5\35\1\36\10\35\1\37\5\35\1\40\1\41"+
    "\1\42\1\43\1\35\1\0\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\35\1\55\1\56"+
    "\1\35\1\57\1\60\1\61\1\35\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\35\1\71\1\72\1\73"+
    "\1\74\1\75\u01e1\0\12\76\206\0\12\76\306\0\12\76"+
    "\234\0\12\76\166\0\12\76\140\0\12\76\166\0\12\76"+
    "\106\0\12\76\u0116\0\12\76\106\0\12\76\u0146\0\12\76"+
    "\46\0\12\76\u012c\0\12\76\200\0\12\76\246\0\12\76"+
    "\6\0\12\76\266\0\12\76\126\0\12\76\206\0\12\76"+
    "\6\0\12\76\u0176\0\12\76\46\0\12\76\306\0\12\76"+
    "\26\0\12\76\126\0\12\76\u0196\0\12\76\246\0\12\76"+
    "\206\0\12\76\u012c\0\12\76\200\0\12\76\74\0\12\76"+
    "\220\0\12\76\166\0\12\76\146\0\12\76\206\0\12\76"+
    "\106\0\12\76\266\0\12\76\u0164\0\62\76\100\0\12\76"+
    "\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[6912];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\0\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\22\26\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\37\2\40\1\41\1\36\2\42\1\0"+
    "\1\43\1\44\1\0\1\45\2\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\0\1\20\1\56"+
    "\4\20\1\0\1\57\1\60\10\26\1\61\6\26\1\62"+
    "\1\63\3\26\1\64\12\26\2\36\1\65\1\66\1\67"+
    "\1\0\1\56\2\20\1\70\13\26\1\71\2\26\1\72"+
    "\1\26\1\73\1\74\17\26\1\75\1\0\2\56\1\0"+
    "\2\56\2\0\1\76\1\77\1\26\1\100\1\101\4\26"+
    "\1\102\4\26\1\103\1\104\12\26\1\105\1\26\1\106"+
    "\2\26\1\56\2\0\1\56\1\107\1\110\3\26\1\111"+
    "\1\112\6\26\1\113\5\26\1\114\1\26\1\115\2\26"+
    "\1\116\3\26\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\2\26\1\127\1\130\1\26\1\131\1\26"+
    "\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\374\0\u013b\0\374"+
    "\0\u017a\0\374\0\374\0\374\0\u01b9\0\374\0\374\0\u01f8"+
    "\0\u0237\0\374\0\u0276\0\374\0\u02b5\0\u02f4\0\u0333\0\374"+
    "\0\374\0\u0372\0\u03b1\0\374\0\u03f0\0\374\0\374\0\374"+
    "\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\374\0\374\0\374\0\374\0\u089d\0\u08dc"+
    "\0\374\0\374\0\u091b\0\374\0\u095a\0\374\0\u0999\0\u09d8"+
    "\0\u0a17\0\374\0\u0a56\0\374\0\u0a95\0\u0ad4\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\u0b13\0\u0b52"+
    "\0\374\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\374\0\374"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u03f0"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u03f0\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\374"+
    "\0\u13ef\0\374\0\374\0\374\0\u142e\0\u146d\0\374\0\u14ac"+
    "\0\u03f0\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u03f0"+
    "\0\u185d\0\u03f0\0\u03f0\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90"+
    "\0\u1bcf\0\u1c0e\0\374\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u1d88\0\u1dc7\0\u1e06\0\u03f0\0\u03f0\0\u1e45\0\u03f0\0\u03f0"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u03f0\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u03f0\0\u03f0\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u03f0\0\u22f2\0\u03f0"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u03f0\0\u03f0"+
    "\0\u24ab\0\u24ea\0\u2529\0\u03f0\0\u03f0\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u03f0\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u03f0\0\u281d\0\u03f0\0\u285c\0\u289b\0\u03f0\0\u28da"+
    "\0\u2919\0\u2958\0\u03f0\0\u03f0\0\u03f0\0\u03f0\0\u03f0\0\u03f0"+
    "\0\u03f0\0\u03f0\0\u2997\0\u29d6\0\u03f0\0\u03f0\0\u2a15\0\u03f0"+
    "\0\u2a54\0\u03f0\0\u03f0\0\u03f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\27\1\30\1\31\1\32\1\33"+
    "\1\34\6\35\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\35\1\50\1\35"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\2\35\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\72\70\1\75\1\71"+
    "\1\76\1\77\1\74\7\75\1\100\62\75\2\101\2\0"+
    "\2\101\1\102\32\101\1\103\35\101\101\0\1\6\124\0"+
    "\1\104\46\0\41\105\1\106\35\105\30\0\1\107\63\0"+
    "\1\110\12\0\1\111\65\0\1\112\10\0\1\113\62\0"+
    "\1\114\4\0\1\115\6\0\1\116\66\0\1\117\1\0"+
    "\2\120\1\67\7\0\1\121\1\0\1\122\1\123\11\0"+
    "\1\121\4\0\1\124\6\0\1\125\2\0\1\126\5\0"+
    "\1\67\20\0\1\117\1\0\3\27\7\0\1\121\1\0"+
    "\1\122\1\123\11\0\1\121\4\0\1\124\6\0\1\125"+
    "\10\0\1\27\30\0\1\127\76\0\1\130\70\0\3\35"+
    "\5\0\6\35\4\0\26\35\27\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\131\5\35\1\132\4\35\27\0\3\35"+
    "\5\0\6\35\4\0\14\35\1\133\1\35\1\134\7\35"+
    "\27\0\3\35\5\0\6\35\4\0\1\135\6\35\1\136"+
    "\4\35\1\137\11\35\27\0\3\35\5\0\6\35\4\0"+
    "\4\35\1\140\7\35\1\141\11\35\27\0\3\35\5\0"+
    "\6\35\4\0\12\35\1\142\13\35\27\0\3\35\5\0"+
    "\6\35\4\0\1\143\11\35\1\144\1\35\1\145\4\35"+
    "\1\146\4\35\27\0\3\35\5\0\6\35\4\0\14\35"+
    "\1\147\11\35\27\0\3\35\5\0\6\35\4\0\5\35"+
    "\1\150\5\35\1\151\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\14\35\1\152\11\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\153\7\35\1\154\11\35\27\0\3\35"+
    "\5\0\6\35\4\0\16\35\1\155\7\35\27\0\3\35"+
    "\5\0\6\35\4\0\16\35\1\156\7\35\27\0\3\35"+
    "\5\0\6\35\4\0\4\35\1\157\21\35\27\0\3\35"+
    "\5\0\6\35\4\0\7\35\1\160\1\161\7\35\1\162"+
    "\2\35\1\163\2\35\27\0\3\35\5\0\6\35\4\0"+
    "\16\35\1\164\7\35\27\0\3\35\5\0\6\35\4\0"+
    "\13\35\1\165\12\35\27\0\3\35\5\0\6\35\4\0"+
    "\14\35\1\166\11\35\27\0\3\35\5\0\6\35\4\0"+
    "\7\35\1\167\16\35\25\0\1\117\1\0\3\67\7\0"+
    "\1\121\14\0\1\121\24\0\1\67\1\70\4\0\72\70"+
    "\2\0\1\72\74\0\1\75\4\0\7\75\1\0\62\75"+
    "\2\0\1\76\74\0\14\170\1\171\4\170\1\172\55\170"+
    "\2\101\2\0\2\101\1\0\32\101\1\0\35\101\6\0"+
    "\1\173\2\0\1\173\27\0\1\173\2\0\2\173\3\0"+
    "\1\173\5\0\1\173\2\0\1\173\1\0\1\173\1\0"+
    "\1\173\21\0\1\174\73\0\1\175\2\0\1\175\27\0"+
    "\1\175\2\0\2\175\3\0\1\175\5\0\1\175\2\0"+
    "\1\175\1\0\1\175\1\0\1\175\32\0\3\176\51\0"+
    "\1\176\20\0\1\117\1\0\2\120\1\67\7\0\1\121"+
    "\1\0\1\122\1\123\11\0\1\121\4\0\1\124\6\0"+
    "\1\125\10\0\1\67\36\0\1\177\76\0\1\122\116\0"+
    "\1\177\76\0\1\124\42\0\3\200\5\0\3\200\7\0"+
    "\6\200\24\0\1\200\22\0\3\35\5\0\6\35\4\0"+
    "\3\35\1\201\22\35\27\0\3\35\5\0\6\35\4\0"+
    "\20\35\1\202\5\35\27\0\3\35\5\0\6\35\4\0"+
    "\14\35\1\203\11\35\27\0\3\35\5\0\6\35\4\0"+
    "\4\35\1\204\21\35\27\0\3\35\5\0\6\35\4\0"+
    "\17\35\1\205\6\35\27\0\3\35\5\0\6\35\4\0"+
    "\1\206\25\35\27\0\3\35\5\0\6\35\4\0\13\35"+
    "\1\207\12\35\27\0\3\35\5\0\6\35\4\0\5\35"+
    "\1\210\20\35\27\0\3\35\5\0\6\35\4\0\21\35"+
    "\1\211\4\35\27\0\3\35\5\0\6\35\4\0\17\35"+
    "\1\212\6\35\27\0\3\35\5\0\6\35\4\0\12\35"+
    "\1\213\13\35\27\0\3\35\5\0\6\35\4\0\14\35"+
    "\1\214\11\35\27\0\3\35\5\0\6\35\4\0\16\35"+
    "\1\215\7\35\27\0\3\35\5\0\6\35\4\0\13\35"+
    "\1\216\12\35\27\0\3\35\5\0\6\35\4\0\20\35"+
    "\1\217\5\35\27\0\3\35\5\0\6\35\4\0\20\35"+
    "\1\220\5\35\27\0\3\35\5\0\6\35\4\0\13\35"+
    "\1\221\12\35\27\0\3\35\5\0\6\35\4\0\23\35"+
    "\1\222\2\35\27\0\3\35\5\0\6\35\4\0\20\35"+
    "\1\223\5\35\27\0\3\35\5\0\6\35\4\0\10\35"+
    "\1\224\15\35\27\0\3\35\5\0\6\35\4\0\2\35"+
    "\1\225\12\35\1\226\2\35\1\227\5\35\27\0\3\35"+
    "\5\0\6\35\4\0\14\35\1\230\11\35\27\0\3\35"+
    "\5\0\6\35\4\0\6\35\1\231\16\35\1\232\27\0"+
    "\3\35\5\0\6\35\4\0\1\233\15\35\1\234\7\35"+
    "\27\0\3\35\5\0\6\35\4\0\10\35\1\235\15\35"+
    "\27\0\3\35\5\0\6\35\4\0\21\35\1\236\4\35"+
    "\27\0\3\35\5\0\6\35\4\0\20\35\1\237\5\35"+
    "\27\0\3\35\5\0\6\35\4\0\10\35\1\240\1\35"+
    "\1\241\13\35\27\0\3\35\5\0\6\35\4\0\10\35"+
    "\1\242\15\35\5\0\14\170\1\171\4\170\1\0\55\170"+
    "\11\0\1\243\107\0\3\176\6\0\1\244\1\121\1\0"+
    "\1\245\1\246\10\0\1\247\1\121\4\0\1\250\6\0"+
    "\1\251\10\0\1\176\20\0\1\252\1\0\3\200\5\0"+
    "\3\200\1\0\1\122\1\123\4\0\6\200\4\0\1\124"+
    "\2\0\1\253\3\0\1\125\10\0\1\200\22\0\3\35"+
    "\5\0\6\35\4\0\14\35\1\254\11\35\27\0\3\35"+
    "\5\0\6\35\4\0\12\35\1\255\13\35\27\0\3\35"+
    "\5\0\6\35\4\0\1\256\25\35\27\0\3\35\5\0"+
    "\6\35\4\0\4\35\1\257\21\35\27\0\3\35\5\0"+
    "\6\35\4\0\16\35\1\260\7\35\27\0\3\35\5\0"+
    "\6\35\4\0\17\35\1\261\1\262\5\35\27\0\3\35"+
    "\5\0\6\35\4\0\1\263\25\35\27\0\3\35\5\0"+
    "\6\35\4\0\1\35\1\264\24\35\27\0\3\35\5\0"+
    "\6\35\4\0\4\35\1\265\21\35\27\0\3\35\5\0"+
    "\6\35\4\0\17\35\1\266\6\35\27\0\3\35\5\0"+
    "\6\35\4\0\1\267\25\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\270\21\35\27\0\3\35\5\0\6\35"+
    "\4\0\2\35\1\271\23\35\27\0\3\35\5\0\6\35"+
    "\4\0\14\35\1\272\11\35\27\0\3\35\5\0\6\35"+
    "\4\0\6\35\1\273\17\35\27\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\274\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\14\35\1\275\11\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\276\21\35\27\0\3\35\5\0\6\35"+
    "\4\0\21\35\1\277\4\35\27\0\3\35\5\0\6\35"+
    "\4\0\16\35\1\300\7\35\27\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\301\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\302\21\35\27\0\3\35\5\0\6\35"+
    "\4\0\20\35\1\303\5\35\27\0\3\35\5\0\6\35"+
    "\4\0\10\35\1\304\15\35\27\0\3\35\5\0\6\35"+
    "\4\0\20\35\1\305\5\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\306\21\35\27\0\3\35\5\0\6\35"+
    "\4\0\10\35\1\307\15\35\27\0\3\35\5\0\6\35"+
    "\4\0\3\35\1\310\22\35\27\0\3\35\5\0\6\35"+
    "\4\0\1\311\25\35\27\0\3\35\5\0\6\35\4\0"+
    "\12\35\1\312\13\35\27\0\3\313\51\0\1\313\36\0"+
    "\1\121\76\0\1\245\55\0\1\244\137\0\1\121\76\0"+
    "\1\250\42\0\3\314\5\0\3\314\7\0\6\314\24\0"+
    "\1\314\15\0\1\315\1\0\1\315\2\0\3\316\51\0"+
    "\1\316\22\0\3\35\5\0\6\35\4\0\11\35\1\317"+
    "\14\35\27\0\3\35\5\0\6\35\4\0\20\35\1\320"+
    "\5\35\27\0\3\35\5\0\6\35\4\0\10\35\1\321"+
    "\15\35\27\0\3\35\5\0\6\35\4\0\21\35\1\322"+
    "\4\35\27\0\3\35\5\0\6\35\4\0\12\35\1\323"+
    "\13\35\27\0\3\35\5\0\6\35\4\0\4\35\1\324"+
    "\21\35\27\0\3\35\5\0\6\35\4\0\20\35\1\325"+
    "\5\35\27\0\3\35\5\0\6\35\4\0\1\326\25\35"+
    "\27\0\3\35\5\0\6\35\4\0\20\35\1\327\5\35"+
    "\27\0\3\35\5\0\6\35\4\0\20\35\1\330\5\35"+
    "\27\0\3\35\5\0\6\35\4\0\16\35\1\331\7\35"+
    "\27\0\3\35\5\0\6\35\4\0\1\332\25\35\27\0"+
    "\3\35\5\0\6\35\4\0\16\35\1\333\7\35\27\0"+
    "\3\35\5\0\6\35\4\0\20\35\1\334\5\35\27\0"+
    "\3\35\5\0\6\35\4\0\4\35\1\335\21\35\27\0"+
    "\3\35\5\0\6\35\4\0\14\35\1\336\11\35\27\0"+
    "\3\35\5\0\6\35\4\0\10\35\1\337\15\35\27\0"+
    "\3\35\5\0\6\35\4\0\13\35\1\340\12\35\27\0"+
    "\3\35\5\0\6\35\4\0\2\35\1\341\23\35\27\0"+
    "\3\35\5\0\6\35\4\0\12\35\1\342\13\35\27\0"+
    "\3\35\5\0\6\35\4\0\20\35\1\343\5\35\27\0"+
    "\3\35\5\0\6\35\4\0\4\35\1\344\21\35\27\0"+
    "\3\313\7\0\1\121\1\0\1\245\1\246\11\0\1\121"+
    "\4\0\1\250\6\0\1\251\10\0\1\313\22\0\3\314"+
    "\5\0\3\314\7\0\6\314\7\0\1\253\14\0\1\314"+
    "\22\0\3\316\51\0\1\316\22\0\3\316\7\0\1\121"+
    "\14\0\1\121\24\0\1\316\22\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\345\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\12\35\1\346\13\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\347\21\35\27\0\3\35\5\0\6\35"+
    "\4\0\2\35\1\350\23\35\27\0\3\35\5\0\6\35"+
    "\4\0\10\35\1\351\15\35\27\0\3\35\5\0\6\35"+
    "\4\0\12\35\1\352\13\35\27\0\3\35\5\0\6\35"+
    "\4\0\3\35\1\353\22\35\27\0\3\35\5\0\6\35"+
    "\4\0\20\35\1\354\5\35\27\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\355\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\3\35\1\356\22\35\27\0\3\35\5\0\6\35"+
    "\4\0\5\35\1\357\20\35\27\0\3\35\5\0\6\35"+
    "\4\0\2\35\1\360\23\35\27\0\3\35\5\0\6\35"+
    "\4\0\6\35\1\361\17\35\27\0\3\35\5\0\6\35"+
    "\4\0\7\35\1\362\16\35\27\0\3\35\5\0\6\35"+
    "\4\0\10\35\1\363\15\35\27\0\3\35\5\0\6\35"+
    "\4\0\21\35\1\364\4\35\27\0\3\35\5\0\6\35"+
    "\4\0\20\35\1\365\5\35\27\0\3\35\5\0\6\35"+
    "\4\0\7\35\1\366\16\35\27\0\3\35\5\0\6\35"+
    "\4\0\14\35\1\367\11\35\27\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\370\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\12\35\1\371\13\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\372\21\35\27\0\3\35\5\0\6\35"+
    "\4\0\13\35\1\373\12\35\27\0\3\35\5\0\6\35"+
    "\4\0\4\35\1\374\21\35\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10899];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\1\1\1\11\1\1\3\11\1\0\2\11"+
    "\2\1\1\11\1\1\1\11\3\1\2\11\2\1\1\11"+
    "\1\1\3\11\22\1\4\11\1\0\1\1\2\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\0"+
    "\1\11\2\0\10\11\1\0\1\1\1\11\4\1\1\0"+
    "\2\11\37\1\1\11\1\1\3\11\1\0\1\1\1\11"+
    "\43\1\1\11\1\0\2\1\1\0\2\1\2\0\40\1"+
    "\2\0\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
 StringBuilder stringBuilder=new StringBuilder();

  public Symbol LineTerminator(){
      stringBuilder.setLength(0);
      stringBuilder.append("<br/>");
return new Symbol(Symbol.WHITE_SPACE);
  }
  // these function is for our reserved words like int,double and etc
  public  Symbol ReservedWord(int code){
      stringBuilder.setLength(0);
      stringBuilder.append("<span style=\" color:"+SymbolType.RESERVED.getColor()+"\""+ "<b>"+yytext()+"</b></span>");
      return new Symbol(code);
  }
  public Symbol Operators(int code,String color){
      stringBuilder.setLength(0);
      stringBuilder.append("<span style=\" color:"+color+"\""+ "<b>"+yytext()+"</b></span>");
      return  new Symbol(code);
  }
  //this function just for special charachters in string and Real numbers
  public Symbol ItalicScan(int code,String color){
       stringBuilder.setLength(0);
            stringBuilder.append("<span style=\" color:"+color+"\""+ "<b><i>"+yytext()+"</i></b></span>");
            return  new Symbol(code);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol myscanner() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringBuilder.setLength(0); stringBuilder.append("&emsp;"); return new Symbol(Symbol.WHITE_SPACE);
            }
            // fall through
          case 93: break;
          case 2:
            { return LineTerminator();
            }
            // fall through
          case 94: break;
          case 3:
            { stringBuilder.setLength(0); stringBuilder.append("&nbsp;"); return new Symbol(Symbol.WHITE_SPACE);
            }
            // fall through
          case 95: break;
          case 4:
            { return Operators(Symbol.ARITHMETIC_NOT,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 96: break;
          case 5:
            { stringBuilder.setLength(0); stringBuilder.append("<span style=\"color: ").append(SymbolType.STRING.getColor()).append("\">&quot;"); yybegin(STRING);
            }
            // fall through
          case 97: break;
          case 6:
            { return Operators(Symbol.MOD,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 98: break;
          case 7:
            { return Operators(Symbol.ARITHMETIC_AND,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 99: break;
          case 8:
            { return Operators(Symbol.OPENT_PARANTHESE,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 100: break;
          case 9:
            { return Operators(Symbol.CLOSE_PARANTHESE,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 101: break;
          case 10:
            { return Operators(Symbol.STAR,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 102: break;
          case 11:
            { return Operators(Symbol.PLUS,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 103: break;
          case 12:
            { return Operators(Symbol.COMMA,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 104: break;
          case 13:
            { return Operators(Symbol.MINUS,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 105: break;
          case 14:
            { return Operators(Symbol.DOT,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 106: break;
          case 15:
            { return Operators(Symbol.DIVISION,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 107: break;
          case 16:
            { return Operators(Symbol.INTEGER,SymbolType.INTEGER.getColor());
            }
            // fall through
          case 108: break;
          case 17:
            { return Operators(Symbol.COLON,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 109: break;
          case 18:
            { return Operators(Symbol.SEMICOLON,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 110: break;
          case 19:
            { return Operators(Symbol.LESS,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 111: break;
          case 20:
            { return Operators(Symbol.EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 112: break;
          case 21:
            { return Operators(Symbol.GREATER,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 113: break;
          case 22:
            { return Operators(Symbol.IDENTIFIER,SymbolType.IDENTIFIER.getColor());
            }
            // fall through
          case 114: break;
          case 23:
            { return Operators(Symbol.OPEN_BRAKET,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 115: break;
          case 24:
            { return Operators(Symbol.CLOSE_BRAKET,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 116: break;
          case 25:
            { return Operators(Symbol.ARITHMETIC_XOR,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 117: break;
          case 26:
            { return Operators(Symbol.OPEN_BRACE,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 118: break;
          case 27:
            { return Operators(Symbol.ARITHMETIC_OR,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 119: break;
          case 28:
            { return Operators(Symbol.CLOSE_BRACE,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 120: break;
          case 29:
            { return Operators(Symbol.TILDA,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 121: break;
          case 30:
            { stringBuilder.append(yytext());
            }
            // fall through
          case 122: break;
          case 31:
            { stringBuilder.append("&emsp;");
            }
            // fall through
          case 123: break;
          case 32:
            { stringBuilder.append("</span><br/>"); yybegin(YYINITIAL); return new Symbol(Symbol.COMMENT);
            }
            // fall through
          case 124: break;
          case 33:
            { stringBuilder.append("&nbsp;");
            }
            // fall through
          case 125: break;
          case 34:
            { stringBuilder.append("<br>");
            }
            // fall through
          case 126: break;
          case 35:
            { stringBuilder.append( yytext() );
            }
            // fall through
          case 127: break;
          case 36:
            { stringBuilder.append("&quot;</span>"); yybegin(YYINITIAL); return new Symbol(Symbol.STRING_LITERAL);
            }
            // fall through
          case 128: break;
          case 37:
            { return Operators(Symbol.NOT_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 129: break;
          case 38:
            { return Operators(Symbol.STAR_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 130: break;
          case 39:
            { return Operators(Symbol.DOUBLE_PLUS,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 131: break;
          case 40:
            { return Operators(Symbol.PLUS_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 132: break;
          case 41:
            { return Operators(Symbol.DOUBLE_MINUS,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 133: break;
          case 42:
            { return Operators(Symbol.MINUS_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 134: break;
          case 43:
            { stringBuilder.setLength(0); stringBuilder.append("<span style=\"color: ").append(SymbolType.COMMENTS.getColor()).append("\">/*"); yybegin(MULTIPLELINECOMMENT);
            }
            // fall through
          case 135: break;
          case 44:
            { stringBuilder.setLength(0); stringBuilder.append("<span style=\"color: ").append(SymbolType.COMMENTS.getColor()).append("\">//"); yybegin(SIMPLECOMMENT);
            }
            // fall through
          case 136: break;
          case 45:
            { return Operators(Symbol.DIVISION_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 137: break;
          case 46:
            { return ItalicScan(Symbol.REAL_ITALIC_NUMBER,SymbolType.REAL_ITALIC_NUMBER.getColor());
            }
            // fall through
          case 138: break;
          case 47:
            { return Operators(Symbol.LESS_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 139: break;
          case 48:
            { return Operators(Symbol.DOUBLE_EQUAL,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 140: break;
          case 49:
            { return ReservedWord(Symbol.DO);
            }
            // fall through
          case 141: break;
          case 50:
            { return ReservedWord(Symbol.IF);
            }
            // fall through
          case 142: break;
          case 51:
            { return ReservedWord(Symbol.IN);
            }
            // fall through
          case 143: break;
          case 52:
            { return Operators(Symbol.LOGICAL_OR,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 144: break;
          case 53:
            { stringBuilder.append("*/</span>"); yybegin(YYINITIAL); return new Symbol(Symbol.COMMENT);
            }
            // fall through
          case 145: break;
          case 54:
            { stringBuilder.append("<span style=\"color: ").append(SymbolType.SPECIAL_ITALIC_CHARS.getColor()).append("\"><i>").append(yytext()).append("</i></span>");
            }
            // fall through
          case 146: break;
          case 55:
            { return Operators(Symbol.CHAR,SymbolType.CHARACTERS.getColor());
            }
            // fall through
          case 147: break;
          case 56:
            { return Operators(Symbol.LOGICAL_AND,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 148: break;
          case 57:
            { return ReservedWord(Symbol.FOR);
            }
            // fall through
          case 149: break;
          case 58:
            { return ReservedWord(Symbol.INT);
            }
            // fall through
          case 150: break;
          case 59:
            { return ReservedWord(Symbol.NEW);
            }
            // fall through
          case 151: break;
          case 60:
            { return Operators(Symbol.LOGICAL_NOT,SymbolType.OPERATOR.getColor());
            }
            // fall through
          case 152: break;
          case 61:
            { return ItalicScan(Symbol.CHAR,SymbolType.CHARACTERS.getColor());
            }
            // fall through
          case 153: break;
          case 62:
            { return ReservedWord(Symbol.AUTO);
            }
            // fall through
          case 154: break;
          case 63:
            { return ReservedWord(Symbol.BOOL);
            }
            // fall through
          case 155: break;
          case 64:
            { return ReservedWord(Symbol.CASE);
            }
            // fall through
          case 156: break;
          case 65:
            { return ReservedWord(Symbol.CHAR);
            }
            // fall through
          case 157: break;
          case 66:
            { return ReservedWord(Symbol.ELSE);
            }
            // fall through
          case 158: break;
          case 67:
            { return ReservedWord(Symbol.GOTO);
            }
            // fall through
          case 159: break;
          case 68:
            { return ReservedWord(Symbol.LONG);
            }
            // fall through
          case 160: break;
          case 69:
            { return ReservedWord(Symbol.TRUE);
            }
            // fall through
          case 161: break;
          case 70:
            { return ReservedWord(Symbol.VOID);
            }
            // fall through
          case 162: break;
          case 71:
            { return ReservedWord(Symbol.BREAK);
            }
            // fall through
          case 163: break;
          case 72:
            { return ReservedWord(Symbol.CONST);
            }
            // fall through
          case 164: break;
          case 73:
            { return ReservedWord(Symbol.FALSE);
            }
            // fall through
          case 165: break;
          case 74:
            { return ReservedWord(Symbol.FLOAT);
            }
            // fall through
          case 166: break;
          case 75:
            { return ReservedWord(Symbol.SHORT);
            }
            // fall through
          case 167: break;
          case 76:
            { return ReservedWord(Symbol.UNTIL);
            }
            // fall through
          case 168: break;
          case 77:
            { return ReservedWord(Symbol.WHILE);
            }
            // fall through
          case 169: break;
          case 78:
            { return ReservedWord(Symbol.DOUBLE);
            }
            // fall through
          case 170: break;
          case 79:
            { return ReservedWord(Symbol.RECORD);
            }
            // fall through
          case 171: break;
          case 80:
            { return ReservedWord(Symbol.REPEAT);
            }
            // fall through
          case 172: break;
          case 81:
            { return ReservedWord(Symbol.RETURN);
            }
            // fall through
          case 173: break;
          case 82:
            { return ReservedWord(Symbol.SIGNED);
            }
            // fall through
          case 174: break;
          case 83:
            { return ReservedWord(Symbol.SIZEOF);
            }
            // fall through
          case 175: break;
          case 84:
            { return ReservedWord(Symbol.STATIC);
            }
            // fall through
          case 176: break;
          case 85:
            { return ReservedWord(Symbol.STRING);
            }
            // fall through
          case 177: break;
          case 86:
            { return ReservedWord(Symbol.SWITCH);
            }
            // fall through
          case 178: break;
          case 87:
            { return ReservedWord(Symbol.DEFAULT);
            }
            // fall through
          case 179: break;
          case 88:
            { return ReservedWord(Symbol.FOREACH);
            }
            // fall through
          case 180: break;
          case 89:
            { return ReservedWord(Symbol.PRINTLN);
            }
            // fall through
          case 181: break;
          case 90:
            { return ReservedWord(Symbol.CONTINUE);
            }
            // fall through
          case 182: break;
          case 91:
            { return ReservedWord(Symbol.FUNCTION);
            }
            // fall through
          case 183: break;
          case 92:
            { return ReservedWord(Symbol.VOLATILE);
            }
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
